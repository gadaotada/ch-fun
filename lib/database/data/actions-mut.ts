'use server'
import { RowDataPacket,ResultSetHeader } from 'mysql2/promise';

import pool from '../conn';
import { timeStampGen } from '../../../lib/helpers';

type Message = {
    msg: string;
    isOk: boolean
}

function msgfromCount (count: number): string {
    if (count < 100) {
        const mc = 100 - count 
        return `Keep pushing! You should do at least ${mc.toString()} more pushups`
    }

    if (count > 100) {
        const mc = count - 100
        return `Good job! You did ${mc.toString()} more then the required 100 pushups!`
    }

    if (count === 100) {
        return `Good job!`
    }

    return 'Error error Gada fu****up'
}

export const updateDailyStats = async (userId: number, daily_field: number | undefined, note: string, count: string, prevCount: string): Promise<Message>  => {
    const poolConn = await pool.getConnection();
    try {
        const totalCount = parseInt(count) + parseInt(prevCount)
        const isDone = totalCount >= 100 ? 'yes' : 'no'
        const now = new Date();
        const query = `
            UPDATE \`user-daily-stats\`
            SET finished = ?, note = ?, completed_at = ?, count = ?
            WHERE user_id = ? AND id = ? 
        `
        const [rows] = await poolConn.query<ResultSetHeader>(query, [isDone, note, now, totalCount, userId, daily_field]);
        
        if (rows.affectedRows > 0) {
            return {
                msg: msgfromCount(totalCount),
                isOk: true
            }
        }

        return {
            msg: msgfromCount(totalCount),
            isOk: false
        };

    } catch (error) {
        console.error(`${timeStampGen()} Error generated by func updateDailyStats: ${error}`);
        return {
            msg: msgfromCount(parseInt(count)),
            isOk: false
        };
    } finally {
        poolConn.release();
    };
}
const mysql = require('mysql2/promise');
const dotenv = require('dotenv')

dotenv.config();

const pool = mysql.createPool({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    multipleStatements: true,
    waitForConnections: true,
    connectionLimit: 50,
    queueLimit: 0,
    idleTimeout: 10000
});

function timeStampGenJs () {
    return new Date().toLocaleString('bg-BG', { timeZone: 'Europe/Sofia' })
}
 
async function CreateDailyTasks() {
    const connection = await pool.getConnection();
    await connection.beginTransaction();
   
    try {
        // Step 1: Select the current active challenge
        let newDailyStatsId = null;

        const [activeChallenges] = await connection.query(
            `SELECT id FROM challenges WHERE status = 'active'`
        );
        const activeChallengeId = activeChallenges[0]?.id;

        if (!activeChallengeId) {
            throw new Error('No active challenge found');
        }

        // Step 2: Update the current day's row and get its details
        const [currentDayStats] = await connection.query(
            `SELECT id, indexNum FROM \`daily-stats\` WHERE challenge_id = ? AND locked = 'no' LIMIT 1`, 
            [activeChallengeId]
        );

        if (!currentDayStats[0]) {
            // DAY 1 case
            const query = `INSERT INTO \`daily-stats\` (challenge_id, indexNum, daily_feature, locked) VALUES (?, ?, ?, ?)`
            const [insertResult] = await connection.query(query, [activeChallengeId, 1, "/memes/16.jpg", "no"])

            newDailyStatsId = insertResult.insertId;
        } else {
            const { id: dailyStatsId, indexNum } = currentDayStats[0];
            // Update current day's row to locked
            await connection.query(
                `UPDATE \`daily-stats\` SET locked = 'yes' WHERE id = ?`, 
                [dailyStatsId]
            );

            // Step 3: Insert new day's row
            const newFeatureNumber = await getRandomInt(1, 31, activeChallengeId, connection);
            const newIndexNum = indexNum + 1;

            const [insertResult] = await connection.query(
                `INSERT INTO \`daily-stats\` (challenge_id, indexNum, daily_feature, locked) VALUES (?, ?, ?, 'no')`, 
                [activeChallengeId, newIndexNum, `/memes/${newFeatureNumber}.jpg`]
            );
            newDailyStatsId = insertResult.insertId;
        }

        // Step 4: Insert a row for each user
        const [users] = await connection.query(`SELECT id FROM users`);
        
        for (let user of users) {
            await connection.query(
                `INSERT INTO \`user-daily-stats\` (daily_stats_id, user_id, completed_at) VALUES (?, ?, '0000-00-00 00:00:00')`, 
                [newDailyStatsId, user.id]
            );
        }

        await connection.commit();
    } catch (error) {
        await connection.rollback();
        console.error(`${timeStampGenJs()} Error generated by CreateDailyTasks: ${error}`);
        throw error; // Re-throw the error after logging and rolling back
    } finally {
        connection.release();
    }
}

async function getRandomInt(min, max, activeChallengeId, connection) {
    min = Math.ceil(min);
    max = Math.floor(max);
    let pickedInt;
    let attempts = 0;
    const maxAttempts = 1000; // Prevent infinite loops

    // Fetch the used memes from the database
    const [usedMemesRows] = await connection.query(`SELECT daily_feature FROM \`daily-stats\` WHERE challenge_id = ?`, [activeChallengeId]);
    // Extract the integers from the daily_feature strings
    const usedMemes = extractIntFromStr(usedMemesRows.map(row => row.daily_feature));

    do {
        pickedInt = Math.floor(Math.random() * (max - min + 1)) + min;
        attempts++;
        // If we've tried too many times, break to avoid infinite loop
        if (attempts > maxAttempts) {
            console.log("Too many attempts to find a unique integer.");
            return null; // Consider adjusting this fallback as needed
        }
    } while (usedMemes.includes(pickedInt));

    return pickedInt;
}

function extractIntFromStr(strArray) {
    // Initialize an empty array to hold the extracted integers
    let extractedInts = [];

    // Regular expression to match numbers in the given format
    const regex = /\/memes\/(\d+)\.jpg$/;

    strArray.forEach(str => {
        const match = str.match(regex);
        if (match) {
            // Convert the matched string to an integer
            const num = parseInt(match[1], 10);
            // Check if the number is between 1 and 31
            if (num >= 1 && num <= 31) {
                extractedInts.push(num);
            }
        }
    });

    return extractedInts;
};

module.exports = { CreateDailyTasks };